{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\nclass Bot:\n    def __init__ (self):\n        self.visited = set() # Set which stores the visited co-ords and prevents duplicates\n        self.directions = [(0,1), (1,0), (0,-1), (-1,0)] # Possible directions for the bot: Up, Right, Down, Left\n        self.currentDirection = 0 # Current direction of the bot: 0 = Up, 1 = Right, 2 = Down, 3 = Left\n        self.position = (0, 0) # Bot starts at (0, 0)\n        self.exitPos = None # Bot does not know where exit is to begin with\n    \n    def turnLeft(self):\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        self.currentDirection = (self.currentDirection - 1) % 4 # Update current direction, calc uses % 4 to keep value 0-3\n\n    def turnRight(self):\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        self.currentDirection = (self.currentDirection + 1) % 4\n\n    def moveForward(self):\n        drivetrain.drive_for(FORWARD, 250, MM)\n        changeX, changeY = self.directions[self.currentDirection] # Get co-ord change based on direction moved\n        self.position = (self.position[0] + changeX, self.position[1] + changeY) # Add co-ord change to current pos and update pos\n        self.visited.add(self.position) # Add the current co-ords to the visited set\n\n    def setExitPos(self):\n        self.exitPos = self.position\n        brain.print(self.exitPos)\n\n    def getNumVisited(self):\n        return len(self.visited)\n\ndef mapMaze(bot):\n    while True:\n        bot.turnLeft() # Follow left-side of the maze\n        if front_eye.near_object(): # If a wall is detected, turn right\n            bot.turnRight()\n        if front_eye.near_object(): # If another wall is detected, turn right again\n            bot.turnRight()\n        elif front_distance.get_distance(MM) < 3000: # If distance is less than 3000mm, move forward (prevents bot from jumping off the edge at start or finish)\n            bot.moveForward()\n        else: # If bot is looking off the edge of the maze, do a 180 to prevent getting stuck\n            bot.turnLeft()\n            bot.turnLeft()\n        \n        if down_eye.detect(RED): # If exit is found, mark exit position and continue mapping\n            bot.setExitPos()\n\n        if bot.getNumVisited() > 58: # When ~90% of the maze has been mapped, stop mapping\n            break\n        wait(5, MSEC)\n\n\n# Add project code in \"main\"\ndef main():\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    pen.set_pen_color(BLUE)\n    pen.move(DOWN)\n\n    bot = Bot() # Initialise bot\n\n    mapMaze(bot)\n\n# VR threads â€” Do not delete\nvr_thread(main)\n","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}